
public class MainPanel extends java.awt.Panel {

	Costanza_Plugin plugin;

	MainPanel(Costanza_Plugin plugin) {
		initComponents();
		this.plugin = plugin;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        radiusLabel = new java.awt.Label();
        radiusTextField = new java.awt.TextField();
        cancelButton = new java.awt.Button();
        startButton = new java.awt.Button();
        invertCheckbox = new java.awt.Checkbox();
        filterRepeatLabel = new java.awt.Label();
        filterRepeatTextField = new java.awt.TextField();

        setBackground(java.awt.Color.white);
        setForeground(java.awt.Color.black);
        setLayout(new java.awt.GridBagLayout());

        radiusLabel.setAlignment(java.awt.Label.RIGHT);
        radiusLabel.setText("Mean filter radius:");
        add(radiusLabel, new java.awt.GridBagConstraints());

        radiusTextField.setText("5.0");
        add(radiusTextField, new java.awt.GridBagConstraints());

        cancelButton.setLabel("Cancel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        add(cancelButton, gridBagConstraints);

        startButton.setLabel("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        add(startButton, gridBagConstraints);

        invertCheckbox.setLabel("Invert image before processing.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        add(invertCheckbox, gridBagConstraints);

        filterRepeatLabel.setAlignment(java.awt.Label.RIGHT);
        filterRepeatLabel.setText("Number of times:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(filterRepeatLabel, gridBagConstraints);

        filterRepeatTextField.setText("2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        add(filterRepeatTextField, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
	private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
		float radius;
		int repeat;
		boolean invert;
		try {
			radius = new Float(radiusTextField.getText()).floatValue();
			repeat = new Integer(filterRepeatTextField.getText()).intValue();
			invert = invertCheckbox.getState();
		} catch (Exception exception) {
			plugin.badUserInput();
			return;
		}
		plugin.start(radius, repeat, invert);
	}//GEN-LAST:event_startButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button cancelButton;
    private java.awt.Label filterRepeatLabel;
    private java.awt.TextField filterRepeatTextField;
    private java.awt.Checkbox invertCheckbox;
    private java.awt.Label radiusLabel;
    private java.awt.TextField radiusTextField;
    private java.awt.Button startButton;
    // End of variables declaration//GEN-END:variables
}
