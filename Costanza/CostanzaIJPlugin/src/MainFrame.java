
import costanza.Job;
import costanza.Options;
import costanza.Queue;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Font;

public class MainFrame extends java.awt.Frame {
	void addJobs(Queue jobs) throws Exception {
		algorithmPanel.addInverterJob(jobs);
		preProcessorMenuPanel.addJobs(jobs);
		Options gradientDescentOption = new Options();
		gradientDescentOption.addOption("extendedNeighborhood", new Integer("0"));
		jobs.addJob(new Job("gradientdescent", gradientDescentOption));
		postProcessorMenuPanel.addJobs(jobs);
		Options intensityFinderOption = new Options();
		jobs.addJob(new Job("intensityfinder", intensityFinderOption));
	}

	int getResultRequest() {
		return algorithmPanel.getResultRequest();
	}

	private enum PanelId {
		IO,
		PRE_PROCESSING,
		POST_PROCESSING
	}
	private AlgorithmPanel algorithmPanel;
	private ProcessorOptionPanel preProcessorMenuPanel;
	private ProcessorOptionPanel postProcessorMenuPanel;
	private Costanza_Plugin plugin;
	private java.awt.CardLayout cardLayout;
	private Font menuFont;
	private Font font;
	private Color backgroundColor;
	
	public MainFrame(Costanza_Plugin plugin) throws Exception {
		menuFont = ij.Menus.getFont();
		font = ij.ImageJ.SansSerif12;
		backgroundColor = ij.ImageJ.backgroundColor;
		
		initComponents();
		this.plugin = plugin;
		initOptionPanels();
		setActivePanel(PanelId.IO);
		pack();
	}

	private void initOptionPanels() throws Exception {
		cardLayout = new CardLayout();
		panel.setLayout(cardLayout);

		algorithmPanel = new AlgorithmPanel(this);
		panel.add(algorithmPanel, "AlgorithmPanel");

		preProcessorMenuPanel = new ProcessorOptionPanel(this);
		preProcessorMenuPanel.addProcessorOptionToMenu("Smoothing", MeanFilterOption.class);
		preProcessorMenuPanel.addProcessorOptionToMenu("Background extraction", BackGroundFinderIntensityOption.class);
		preProcessorMenuPanel.addOptionPanel("Background extraction");
		preProcessorMenuPanel.addOptionPanel("Smoothing");
		panel.add(preProcessorMenuPanel, "PreProcessorMenuPanel");

		postProcessorMenuPanel = new ProcessorOptionPanel(this);
		postProcessorMenuPanel.addProcessorOptionToMenu("Peak remover", PeakRemoverOption.class);
		postProcessorMenuPanel.addProcessorOptionToMenu("Peak merger", PeakMergerOption.class);
		postProcessorMenuPanel.addOptionPanel("Peak remover");
		postProcessorMenuPanel.addOptionPanel("Peak merger");
		panel.add(postProcessorMenuPanel, "PostProcessorMenuPanel");

		cardLayout.show(panel, "AlgorithmPanel");
	}

	public void update() {
		pack();
		repaint();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new java.awt.Panel();
        menuBar = new java.awt.MenuBar();
        mainMenu = new java.awt.Menu();
        startMenuItem = new java.awt.MenuItem();
        quitMenuItem = new java.awt.MenuItem();
        optionsMenu = new java.awt.Menu();
        ioMenuItem = new java.awt.MenuItem();
        preProcessorMenuItem = new java.awt.MenuItem();
        postProcessorMenuItem = new java.awt.MenuItem();

        setBackground(backgroundColor);
        setName("Costanza Plugin"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        panel.setFont(font);
        panel.setLayout(new java.awt.CardLayout());
        add(panel, java.awt.BorderLayout.CENTER);

        menuBar.setFont(menuFont);

        mainMenu.setLabel("Main");

        startMenuItem.setLabel("Start analyze");
        startMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(startMenuItem);

        quitMenuItem.setLabel("Close plugin");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(quitMenuItem);

        menuBar.add(mainMenu);

        optionsMenu.setLabel("Options");

        ioMenuItem.setLabel("Input and output");
        ioMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ioMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(ioMenuItem);

        preProcessorMenuItem.setLabel("Pre-processing");
        preProcessorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preProcessorMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(preProcessorMenuItem);

        postProcessorMenuItem.setLabel("Post-processing");
        postProcessorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postProcessorMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(postProcessorMenuItem);

        menuBar.add(optionsMenu);

        setMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
	/** Exit the Application */
	private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
		plugin.stop();
	}//GEN-LAST:event_exitForm

	private void ioMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ioMenuItemActionPerformed
		setActivePanel(MainFrame.PanelId.IO);
	}//GEN-LAST:event_ioMenuItemActionPerformed

	private void preProcessorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preProcessorMenuItemActionPerformed
		setActivePanel(MainFrame.PanelId.PRE_PROCESSING);
	}//GEN-LAST:event_preProcessorMenuItemActionPerformed

	private void postProcessorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postProcessorMenuItemActionPerformed
		setActivePanel(MainFrame.PanelId.POST_PROCESSING);
	}//GEN-LAST:event_postProcessorMenuItemActionPerformed

	private void startMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMenuItemActionPerformed
		plugin.start();
	}//GEN-LAST:event_startMenuItemActionPerformed

	private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
		plugin.stop();
	}//GEN-LAST:event_quitMenuItemActionPerformed

	private void setActivePanel(PanelId id) {
		switch (id) {
			case IO:
				cardLayout.show(panel, "AlgorithmPanel");
				update();
				break;
			case PRE_PROCESSING:
				cardLayout.show(panel, "PreProcessorMenuPanel");
				update();
				break;
			case POST_PROCESSING:
				cardLayout.show(panel, "PostProcessorMenuPanel");
				update();
				break;
			default:
				ij.IJ.showMessage("Unexpected error in setActivePanel()");
		}
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.MenuItem ioMenuItem;
    private java.awt.Menu mainMenu;
    private java.awt.MenuBar menuBar;
    private java.awt.Menu optionsMenu;
    private java.awt.Panel panel;
    private java.awt.MenuItem postProcessorMenuItem;
    private java.awt.MenuItem preProcessorMenuItem;
    private java.awt.MenuItem quitMenuItem;
    private java.awt.MenuItem startMenuItem;
    // End of variables declaration//GEN-END:variables
}
