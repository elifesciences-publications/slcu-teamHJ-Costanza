
public class ScaleOptionPanel extends java.awt.Panel {

    private MainFrame frame;
    private ij.measure.Calibration calibration;

    public ScaleOptionPanel(MainFrame frame) {
        initComponents();
//        if(calibration != null)
//            setScale(calibration.pixelWidth, calibration.pixelHeight, calibration.pixelDepth);
        this.frame = frame;
    }

    public boolean getIJCalibrationOption() {
        return checkbox1.getState();
    }

    public void setIJCalibrationOption(Boolean b) {
        checkbox1.setState(b);
        setCalibrationEnable();
    }

    public float getScaleX() {
        return new Float(xScaleTextField.getText()).floatValue();
    }

    public float getScaleY() {
        return new Float(yScaleTextField.getText()).floatValue();
    }

    public float getScaleZ() {
        return new Float(zScaleTextField.getText()).floatValue();
    }

    public Integer getIntensityLevels() {
        return new Integer(intensityLevelsTextField.getText());
    }
    
    public void setScale(double x, double y, double z) {
        xScaleTextField.setText(Double.toString(x));
        yScaleTextField.setText(Double.toString(y));
        zScaleTextField.setText(Double.toString(z));
    }

    void setCalibration(ij.measure.Calibration calibration) {
        this.calibration = calibration;
        if (checkbox1.getState() == true) {
            if(calibration != null)
                setScale(calibration.pixelWidth, calibration.pixelHeight, calibration.pixelDepth);
        } else {
            calibration.pixelWidth = new Float(xScaleTextField.getText()).floatValue();
            calibration.pixelHeight = new Float(yScaleTextField.getText()).floatValue();
            calibration.pixelDepth = new Float(zScaleTextField.getText()).floatValue();
        }
    }
    
    public void setIntensityLevels(Integer i) {
        intensityLevelsTextField.setText(i.toString());
    }
    
    private void setCalibrationEnable(){
            if (checkbox1.getState() == true) {
                scalePanel.setEnabled(false);
//                if(calibration != null)
//                    setScale(calibration.pixelWidth, calibration.pixelHeight, calibration.pixelDepth);
            } else {
                scalePanel.setEnabled(true);
            }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        checkbox1 = new java.awt.Checkbox();
        label = new java.awt.Label();
        scalePanel = new java.awt.Panel();
        xScaleLabel = new java.awt.Label();
        xScaleTextField = new java.awt.TextField();
        yScaleLabel = new java.awt.Label();
        yScaleTextField = new java.awt.TextField();
        zScaleLabel = new java.awt.Label();
        zScaleTextField = new java.awt.TextField();
        otherLabel = new java.awt.Label();
        label1 = new java.awt.Label();
        intensityLevelsTextField = new java.awt.TextField();

        setBackground(new java.awt.Color(245, 245, 245));
        setLayout(new java.awt.GridBagLayout());

        checkbox1.setLabel("use ImageJ stack calibration");
        checkbox1.setState(true);
        scalePanel.setEnabled(false);
        checkbox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                calibrationStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(checkbox1, gridBagConstraints);

        label.setText("or enter scale of the stack:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(label, gridBagConstraints);

        scalePanel.setLayout(new java.awt.GridBagLayout());

        xScaleLabel.setBackground(new java.awt.Color(245, 245, 245));
        xScaleLabel.setText("X-scale:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        scalePanel.add(xScaleLabel, gridBagConstraints);

        xScaleTextField.setPreferredSize(new java.awt.Dimension(85, 18));
        xScaleTextField.setText("1.0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        scalePanel.add(xScaleTextField, gridBagConstraints);

        yScaleLabel.setBackground(new java.awt.Color(245, 245, 245));
        yScaleLabel.setText("Y-scale:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        scalePanel.add(yScaleLabel, gridBagConstraints);

        yScaleTextField.setName(""); // NOI18N
        yScaleTextField.setPreferredSize(new java.awt.Dimension(85, 18));
        yScaleTextField.setText("1.0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        scalePanel.add(yScaleTextField, gridBagConstraints);

        zScaleLabel.setBackground(new java.awt.Color(245, 245, 245));
        zScaleLabel.setText("Z-scale:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        scalePanel.add(zScaleLabel, gridBagConstraints);

        zScaleTextField.setPreferredSize(new java.awt.Dimension(85, 18));
        zScaleTextField.setText("1.0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        scalePanel.add(zScaleTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        add(scalePanel, gridBagConstraints);

        otherLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        otherLabel.setText("Other options:");
        otherLabel.setVisible(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(otherLabel, gridBagConstraints);

        label1.setText("Number of intensity levels:");
        label1.setVisible(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(label1, gridBagConstraints);

        intensityLevelsTextField.setColumns(3);
        intensityLevelsTextField.setText("255");
        intensityLevelsTextField.setVisible(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(intensityLevelsTextField, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
        private void calibrationStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_calibrationStateChanged
            setCalibrationEnable();
        }//GEN-LAST:event_calibrationStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Checkbox checkbox1;
    private java.awt.TextField intensityLevelsTextField;
    private java.awt.Label label;
    private java.awt.Label label1;
    private java.awt.Label otherLabel;
    private java.awt.Panel scalePanel;
    private java.awt.Label xScaleLabel;
    private java.awt.TextField xScaleTextField;
    private java.awt.Label yScaleLabel;
    private java.awt.TextField yScaleTextField;
    private java.awt.Label zScaleLabel;
    private java.awt.TextField zScaleTextField;
    // End of variables declaration//GEN-END:variables
}
